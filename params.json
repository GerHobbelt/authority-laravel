{"name":"Authority","body":"# Welcome to Authority for Laravel.\r\n\r\nThis is a clone from codeigniter-authority-authorization\r\nCheck https://github.com/machuga/codeigniter-authority-authorization for more info.\r\nAll credits go to ***machuga*** for PHP-izing this awesome library\r\n\r\n## Installation\r\n\r\n- Enter your database settings in config/database.php\r\n- Choose a session driver in config/session.php\r\n- Run the following commands on the terminal\r\n\r\n```\r\n$ cd to/your/project/root/\r\n$ php artisan bundle:install authority\r\n$ php artisan migrate:install\r\n```\r\n\r\nBefore we can run the migration, you will have to register the bundle as seen below.\r\n\r\n- Edit ***application/bundles.php*** and add authority to the array as seen below\r\n\r\n```php\r\nreturn array(\r\n    'authority' => array(\r\n        'auto' => true\r\n    )\r\n)\r\n```\r\n\r\nNow we can run authority's migration to setup the tables\r\n```\r\n$ php artisan migrate authority\r\n```\r\n\r\nSince we don't want updates (via artisan, Laravel's CLI) to break our configuration later, we move the config outside of the Authority bundle.\r\n\r\n- Move ***bundles/authority/config/authority.php*** to ***application/config/authority.php***\r\n\r\nIf you want your authority config to live in another bundle, you have to point to that location by changing the location in ***bundles/authority/authority.php***.\r\n\r\n\r\n### Configuring the Auth driver\r\n\r\nOpen up ***application/config/auth.php*** and change the **value** of \"driver\" to \"eloquent\"\r\n\r\n\r\n### Adding the models\r\n\r\n#### User model\r\n\r\n***application/models/user.php***\r\n\r\n```php\r\nclass User extends Eloquent {\r\n\r\n    public static $timestamps = true;\r\n\r\n    public function roles()\r\n    {\r\n        return $this->has_many_and_belongs_to('Role', 'role_user');\r\n    }\r\n\r\n    public function has_role($key)\r\n    {\r\n        foreach($this->roles as $role)\r\n        {\r\n            if($role->name == $key)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public function has_any_role($keys)\r\n    {\r\n        if( ! is_array($keys))\r\n        {\r\n            $keys = func_get_args();\r\n        }\r\n\r\n        foreach($this->roles as $role)\r\n        {\r\n            if(in_array($role->name, $keys))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n#### Role model\r\n\r\n***application/models/role.php***\r\n\r\n```php\r\nclass Role extends Eloquent {\r\n\r\n    public function users()\r\n    {\r\n        return $this->has_many_and_belongs_to('User');\r\n    }\r\n\r\n}\r\n```\r\n\r\n## Using Authority\r\nAuthority is very flexible, allowing you to make complex rules, load permissions from different places, and make handy action aliases.\r\n\r\nBefore we can use Authority, we need to understand how it works. In order to understand how it works, we have to be aware of some concepts.\r\n\r\n#### Actions\r\n* Actions apply to Resources\r\n* Actions are strings\r\n* Actions can be grouped by action_aliases\r\n\r\n#### Resources\r\n* Resource is simply a name for a thing or group of things (User, Page, UserEditButton, PageTitle)\r\n* Resources are strings\r\n* There is an \"all\" wildcard Resource predefined (handy for admins)\r\n\r\n#### Rules\r\n* A Rule is a way to allow or deny a User to perform an Action on a Resource\r\n* A Rule contains 1 Action, 1 Resource and optionally a Closure (internal logic)\r\n* Rules will be initialized once per page load (only when being called) for the user that does the request\r\n\r\n#### Allow\r\n* Allow applies a Rule to a User, that allows the user to perform an Action on a Resource\r\n* If the Rule contains a Closure, the User will only be allowed to perform the Action when the Closure returns \"true\"\r\n\r\n#### Deny\r\n* Deny applies a Rule to a user, that denies the user to perform an Action on a Resource\r\n* If the Rule contains a Closure, the User will only be denied from performing the Action when the Closure returns \"true\"\r\n\r\nNow that we are familiar with these concepts, let's dive into some example configurations.\r\n\r\n```php\r\n\t'initialize' => function($user)\r\n\t{\r\n\t\t// The initialize method (this Closure function) will be ran on every page load when the bundle get's started.\r\n\t\t// A User Object will be passed into this method and is available via $user\r\n\t\t// The $user variable is a instantiated User Object (application/models/user.php)\r\n\t\t\r\n\t\t// First, let's group together some \"Actions\" so we can later give a User access to multiple actions at once\r\n\t\tAuthority::action_alias('manage', array('create', 'read', 'update', 'delete'));\r\n\t\tAuthority::action_alias('moderate', array('update', 'delete'));\r\n\r\n\t\t// If a user doesn't have any roles, we don't have to give him permissions so we can stop right here.\r\n\t\tif(count($user->roles) == 0) return false;\r\n\r\n\t\t// Let's say we want to \"Deny\" the User from adding accounts if his age is below 21 (i don't mean to discriminate ;) \r\n\t\t// Since we have the User object, and it has an \"age\" property, we can make a simple if statement.\r\n\t\tif($user->age < 21)\r\n\t\t{\r\n\t\t\t// Too young! we \"deny\" the user to create users, i'm sorry...\r\n\t\t\tAuthority::deny('create', 'User');\r\n\t\t}\r\n\r\n\t\tif($user->has_role('admin'))\r\n\t\t{\r\n\t\t\t// The logged in user is an admin, we allow him to perform manage actions (create, read, update, delete) on \"all\" \"Resources\".\r\n\t\t\tAuthority::allow('manage', 'all');\r\n\t\t\t\t\t\t\r\n\t\t\t// Let's make it a little harder, we don't want the admin to be able to delete his own User account, but has to be allowed to delete other Users.\r\n\t\t\t// We only know that the \"Resource\" is a User, But we don't know the User id, we can send that information to the Rule Closure, in the Closure below, the argument is called $that_user.\r\n\t\t\t// We also pass in the logged in user, since the Closure is outside of the scope where this comment is in.\r\n\t\t\tAuthority::deny('delete', 'User', function ($that_user) use ($user)\r\n\t\t\t{\r\n\t\t\t\t// If the id of the User that we are trying to delete is equal to our logged in user, we return true, meaning the Deny Rule will be set.\r\n\t\t\t\treturn $that_user->id == $user->id;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif($user->has_role('store_owner'))\r\n\t\t{\r\n\t\t\t// What if the logged in User has the role \"store_owner\", let's allow the user to manage his own store\r\n\t\t\tAuthority::allow('manage', 'Store', function($store) use ($user)\r\n\t\t\t{\r\n\t\t\t\treturn ! is_null(DB::table('stores')->where_id($store->id)->where_user_id($user->id)->first());\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// We can set Allow and Deny Rules by looping through results we get from somewhere else, in this example, a database\r\n\t\tforeach(DB::table('rules')->where_user_id($user->id)->get() as $permission)\r\n\t\t{\r\n\t\t\tif($permission->type == 'allow')\r\n\t\t\t{\r\n\t\t\t\tAuthority::allow($permission->action, $permission->resource);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAuthority::deny($permission->action, $permission->resource);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```\r\n\r\nNow that we have the initialize method setup, we can do checks throughout our code (controllers/models/views) like this\r\n\r\n```php\r\n\t// in some controller\r\n\tif(Authority::cannot('create', 'User'))\r\n\t{\r\n\t    Redirect::to('home');\r\n\t}\r\n\r\n\t// in some view\r\n\t<?php if(Authority::can('edit', 'User')): ?>\r\n\t\t<?php echo HTML::link('users/edit/'.$user->id, 'Edit User'); ?>\r\n\t<?php endif ?>\r\n\r\n\t// In some model\r\n\t$user = User::find($id);\r\n\tif(Authority::can('delete', 'User', $user))\r\n\t{\r\n\t\t$user->delete();\r\n\t}\r\n```\r\n\r\n## Support or Contact\r\nHaving trouble with Authority? Find me in the #laravel IRC channel or contact me @ k.schmeets@gmail.com and iâ€™ll help you sort it out.\r\n\r\n## A big Thanks\r\nTo (@ryanb) for making CanCan\r\n\r\nTo (@machuga) for porting CanCan to PHP","tagline":"Role Based Access Control bundle for Laravel","google":"<script type=\"text/javascript\">    var _gaq = _gaq || [];   _gaq.push(['_setAccount', 'UA-30563892-1']);   _gaq.push(['_trackPageview']);    (function() {     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);   })();  </script>","note":"Don't delete this file! It's used internally to help with page regeneration."}